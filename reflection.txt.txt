Reflection Questions for FocusFlow

1. What was the hardest part to build? How did you approach it? 
A. The hardest part was implementing the analog clock with SVG and ensuring it synchronized with the timer logic, especially while fixing the double-prompt issue for the mood tracker. For the clock, I used an SVG circle with strokeDasharray and strokeDashoffset to create a circular countdown, calculating the angle based on remaining time. The double-prompt issue arose from React Strict Mode and was resolved by isolating the mood prompt in a separate useEffect with a useRef flag to prevent duplicate triggers. I approached these by breaking them into smaller problems, testing with short durations, and debugging with console logs.
2. What tradeoffs did you make and why? 
A. I used a simple text prompt() for the mood tracker instead of a polished UI (e.g., buttons or emojis) to stay within the 4-6 hour estimate, prioritizing core functionality and bug fixes (like audio and prompts) over extra polish. I also kept the break sound as a URL rather than a local file to avoid additional setup complexity, though this sacrifices offline reliability. These tradeoffs balanced time constraints with delivering a fully functional app.
3. If you had 2 more hours, what would you improve? 
A. With 2 more hours, I’d replace the mood tracker’s prompt() with a dropdown or emoji picker for better UX, add smooth animations to the analog clock’s progress (e.g., using CSS transitions), and implement localStorage to persist tasks, moods, and stats across sessions. These would enhance usability and data retention without altering the core structure.
4. If you used AI tools, explain how you used them and why. What decisions did you make beyond the suggestions? 
A. I used Grok (xAI) to draft the initial app structure, debug audio issues, and resolve the double-prompt problem. I chose Grok for its ability to provide detailed code and explanations, speeding up development. Beyond its suggestions, I designed the iOS-like gradient UI with Tailwind CSS, implemented full task editing, added the analog clock from scratch, and fine-tuned the audio logic (e.g., pausing sounds on timer pause). I also decided to use a useRef flag for the prompt fix, refining Grok’s approach to ensure robustness in Strict Mode, reflecting my own problem-solving over rote adoption.